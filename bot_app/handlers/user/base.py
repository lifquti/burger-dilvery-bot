import os

from datetime import datetime
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram import types
from bot_app import db, markups, config
from bot_app.db.users import get_user, order_data
from bot_app.markups.Inline_keyboards.location import ikb_of_locations, fontan_ikb, sever_ikb, cheremuski_ikb, \
    centr_ikb, yug_ikb
from bot_app.markups.user.main import cancel_menu
from bot_app.states.user import User
from bot_app.misc import bot, dp


@dp.message_handler(commands='start', state='*')
async def process_start(message: Message, state: FSMContext):
    await state.finish()
    await db.users.create_user(message.from_user)
    user_data = await get_user(message.from_user.id)
    if user_data['phone_number']:
        await bot.send_message(message.from_user.id,
                               text='–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ —á–∞—Ç-–±–æ—Ç—ñ –Ω–∞—à–æ—ó –±—É—Ä–≥–µ—Ä–Ω–æ—ó!üéâ',
                               reply_markup=markups.user.main.main_menu_with_phone())
        return

    await bot.send_message(message.from_user.id,
                           text='–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ —á–∞—Ç-–±–æ—Ç—ñ –Ω–∞—à–æ—ó –±—É—Ä–≥–µ—Ä–Ω–æ—ó!üéâ'
                                '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ —á–∞—Ç-–±–æ—Ç–æ–º, –≤–∞–º –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É.'
                                '–í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µüëá',
                           reply_markup=markups.user.main.main_menu())


@dp.message_handler(text='–ú–µ–Ω—éüìã')
async def photo_of_main_menu(message: Message):
    current_dir = os.getcwd()
    photo_path = os.path.join(current_dir, 'bot_app', 'photo', 'menu.png')
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo=photo)


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def contact_recieved(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, text='–í–∞—à –Ω–æ–º–µ—Ä –¥–æ–¥–∞–Ω–æ –¥–æ –Ω–∞—à–æ—ó –±–∞–∑–∏',
                           reply_markup=markups.user.main.main_menu_with_phone())
    if message.contact.phone_number.startswith('+'):
        await db.users.add_phone_number(message.from_user, message.contact.phone_number[1:])
        return

    await db.users.add_phone_number(message.from_user, message.contact.phone_number)


@dp.message_handler(text='–ü—Ä–æ –Ω–∞—Åü•á')
async def about_us(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text='–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≥–∞—Ä—è—á–∏—Ö —ñ —Å–æ–∫–æ–≤–∏—Ç–∏—Ö –±—É—Ä–≥–µ—Ä—ñ–≤ —É –º—ñ—Å—Ç—ñ –•–∞—Ä–∫—ñ–≤üçî.\n\n'
                                'üöö –î–æ –æ–¥–Ω—ñ—î—ó –≥–æ–¥–∏–Ω–∏ –ø–æ –º—ñ—Å—Ç—É.\n\n'
                                '‚òéÔ∏è +38063-703-54-54\n\n'
                                '‚è∞ 10:00-0:00')


@dp.message_handler(text='–ê–∫—Ü—ñ—óüî•')
async def promotions(message: types.Message):
    current_dir = os.getcwd()
    photo_path = os.path.join(current_dir, 'bot_app', 'photo', 'promo.jpg')
    with open(photo_path, 'rb') as photo:
        await bot.send_photo(message.from_user.id, photo=photo,
                             caption='–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—å –∑ –∞–∫—Ü—ñ—è–º–∏ –º–æ–∂–Ω–∞ –Ω–∞ –Ω–∞—à–æ–º—É —Å–∞–π—Ç—ñ ')


@dp.message_handler(text='–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É‚úçÔ∏è')
async def feedback(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, text='–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –Ω–∏–∂—á–µüëá —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–≥–æ',
                           reply_markup=cancel_menu())
    await state.set_state(User.support)


@dp.message_handler(text='–ù–∞–∑–∞–¥ üîô', state='*')
async def confirmation_order(message: Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, '–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é',
                           reply_markup=markups.user.main.main_menu_with_phone())


@dp.message_handler(state=User.support)
async def message_to_support(message: Message, state: FSMContext):
    await bot.send_message(chat_id=config.ADMINS_ID[0], text='–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏')
    await bot.forward_message(chat_id=config.ADMINS_ID[0], from_chat_id=message.from_user.id,
                              message_id=message.message_id)
    await bot.send_message(message.from_user.id, text='–í–∞—à–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–µ –¥–æ –Ω–∞—Å', reply_markup=cancel_menu())
    await state.finish()


@dp.message_handler(text='–§—ñ–ª—ñ–∞–ª–∏ üö©')
async def locations_of_shops(message: Message):
    await bot.send_message(message.from_user.id, text='–ü–µ—Ä–µ–ª—ñ–∫ –Ω–∞—à–∏—Ö —Ñ—ñ–ª—ñ–∞–ª—ñ–≤:', reply_markup=ikb_of_locations())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª–∏ üö©')
async def locations_of_shops(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–ü–µ—Ä–µ–ª—ñ–∫ –Ω–∞—à–∏—Ö —Ñ—ñ–ª—ñ–∞–ª—ñ–≤:', reply_markup=ikb_of_locations())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª –Ω–∞ –°–∞–ª—Ç—ñ–≤—Ü—ñ')
async def fontan(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–§—ñ–ª—ñ–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n'
                                      'üìç–ó—ñ—Ä–∫–æ–≤–µ –º—ñ—Å—Ç–µ—á–∫–æ, –≤—É–ª. –ê—Ä–º—ñ–π—Å—å–∫–∞, 11, –∫–æ—Ä–ø—É—Å 1, –•–∞—Ä–∫—ñ–≤ \n\n'
                                      '‚åõÔ∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ–∞–ª–∞: \n'
                                      '–©–æ–¥–Ω—è. –∑ 10:00 –¥–æ 00:00',
                                 reply_markup=fontan_ikb())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª –Ω–∞ –ü—ñ–≤–Ω—ñ—á–Ω—ñ–π –°–∞–ª—Ç—ñ–≤—Ü—ñ')
async def sever(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–§—ñ–ª—ñ–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n'
                                      'üìçüìç–ö—Ä–∏–º—Å—å–∫–∞, 70-–ê, –•–∞—Ä–∫—ñ–≤ \n\n'
                                      '‚åõÔ∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ–∞–ª–∞: \n'
                                      '–©–æ–¥–Ω—è –∑ 10:00 –¥–æ 22:00',
                                 reply_markup=sever_ikb())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª —É –®–µ–≤—á–µ–Ω–∫–æ–≤—Å—å–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ')
async def cheremuski(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–§—ñ–ª—ñ–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n'
                                      'üìç–í—É–ª–∏—Ü—è –†–∞–¥—ñ—Å–Ω–∞ 2/4, –•–∞—Ä–∫—ñ–≤ \n\n'
                                      '‚åõÔ∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ–∞–ª–∞: \n'
                                      '–©–æ–¥–Ω—è, –∑ 10:00 –¥–æ 00:00',
                                 reply_markup=cheremuski_ikb())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª —É –°–ª–æ–±—ñ–¥—Å—å–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ')
async def centr(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–§—ñ–ª—ñ–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n'
                                      'üìç–≤—É–ª. –£—Å–ø–µ–Ω—Å—å–∫–∞, 40. –•–∞—Ä–∫—ñ–≤ \n\n'
                                      '‚åõÔ∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ–∞–ª–∞: \n'
                                      '–©–æ–¥–Ω—è –∑ 10:00 –¥–æ 00:00',
                                 reply_markup=centr_ikb())


@dp.callback_query_handler(text='–§—ñ–ª—ñ–∞–ª –Ω–∞ –•–æ–ª–æ–¥–Ω–æ–≥—ñ—Ä—Å—å–∫–æ–º—É —Ä–∞–π–æ–Ω—ñ')
async def yug(call: CallbackQuery):
    await call.answer()
    await call.message.edit_text(text='–§—ñ–ª—ñ–∞–ª –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∑–∞ –∞–¥—Ä–µ—Å–æ—é:\n'
                                      'üìç—É–ª. –ê–∫. –í—ñ–ª—å—è–º—Å–∞ 62 –ê, –•–∞—Ä–∫—ñ–≤ \n\n'
                                      '‚åõÔ∏è–ì—Ä–∞—Ñ—ñ–∫ —Ä–æ–±–æ—Ç–∏ —Ñ—ñ–ª—ñ–∞–ª–∞: \n'
                                      '–©–æ–¥–Ω—è –∑ 10:00 –¥–æ 00:00',
                                 reply_markup=yug_ikb())


@dp.message_handler(text='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è üçî')
async def order_menu(message: Message):
    await bot.send_message(message.from_user.id,
                           text='–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –º–µ–Ω—é –∑–∞–º–æ–≤–ª–µ–Ω—å',
                           reply_markup=markups.user.main.order_menu_kb())


@dp.message_handler(text='–í—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω—è üçü')
async def all_orders(message: Message):
    user_data = await get_user(message.from_user.id)
    orders_list = await order_data(user_data['phone_number'])
    if not orders_list:
        await bot.send_message(message.from_user.id, text='–£ –≤–∞—Å —â–µ –Ω–µ–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω—å')
        return

    await bot.send_message(message.from_user.id, text='–û—Å—å –ø–µ—Ä–µ–ª—ñ–∫ –≤–∞—à–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å:')
    for order in orders_list:
        await bot.send_message(message.from_user.id, text='‚úÖ–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä: <b>{}</b>\n'
                                                          'üìÖ–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n<i>{}</i>\n'
                                                          'üïî–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n<i>{}</i>\n'
                                                          'üóí–©–æ –∑–∞–º–æ–≤–ª—è–ª–∏:\n<code>{}</code>\n'
                                                          'üö©–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:\n<b>{}</b>'.format(order['order_number'],
                                                                                                order['date'].strftime(
                                                                                                    "%Y:%m:%d"),
                                                                                                order['date'].strftime(
                                                                                                    "%H:%M"),
                                                                                                order['products'],
                                                                                                order['address']))


@dp.message_handler(text='–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—ñ ‚è≥')
async def orders_in_processing(message: Message):
    user_data = await get_user(message.from_user.id)
    orders_list = await order_data(user_data['phone_number'])
    active_orders = [order for order in orders_list if order['status'] not in ['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ']]
    if active_orders:
        for order in orders_list:
            if order['status'] not in ['–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ', '–í—ñ–¥–º—ñ–Ω–µ–Ω–æ']:
                await bot.send_message(message.from_user.id, text='‚úÖ–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–º–µ—Ä: <b>{}</b>\n'
                                                                  'üìÖ–î–∞—Ç–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n<i>{}</i>\n'
                                                                  'üïî–ß–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n<i>{}</i>\n'
                                                                  'üóí–©–æ –∑–∞–º–æ–≤–ª—è–ª–∏:\n<code>{}</code>\n'
                                                                  'üö©–ê–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏\n{}'.format(order['order_number'],
                                                                                                order['date'].strftime(
                                                                                                    "%Y:%m:%d"),
                                                                                                order['date'].strftime(
                                                                                                    "%H:%M"),
                                                                                                order['products'],
                                                                                                order['address']))
        await bot.send_message(message.from_user.id, text='–û—á—ñ–∫—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–º—ñ–Ω—É —Å—Ç–∞—Ç—É—Å—É –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è')
        return

    await bot.send_message(message.from_user.id, text='–ù–µ–º–∞—î –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∏—Ö –∑–∞–º–æ–≤–ª–µ–Ω—å')


@dp.callback_query_handler(text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é')
async def main_menu_from_ikb(call: CallbackQuery):
    await call.answer()
    await call.message.delete()
    await bot.send_message(call.from_user.id, text='–í—ñ—Ç–∞—î–º–æ –≤–∞—Å –≤ —á–∞—Ç-–±–æ—Ç—ñ pizza.od.ua!üéâ')
